"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PriorityQueue = void 0;

const EventEmitter = require('eventemitter3');

class PriorityQueue extends EventEmitter {
  constructor() {
    super();
    this._queue = [];

    for (let i = 0; i < 10; i++) {
      this._queue.push([]);
    }
  }

  enqueue(element, priority = 5) {
    this._queue[priority].push(element);

    this.emit('enqueue', element, priority);
  }

  dequeue(priority) {
    if (priority) {
      const element = this._queue[priority].shift();

      if (element !== undefined) {
        this.emit('dequeue', element, priority);
      }

      return element;
    }

    for (let p = 0; p < 10; p++) {
      if (this._queue[p].length > 0) {
        const element = this._queue[p].shift();

        this.emit('dequeue', element, p);
        return element;
      }
    }

    return undefined;
  }

  getSize(priority) {
    if (priority) {
      return this._queue[priority].length;
    }

    let count = 0;

    for (let p = 0; p < 10; p++) {
      count += this._queue[p].length;
    }

    return count;
  }

  get size() {
    return this.getSize();
  }

  clear() {
    for (let i = 0; i < 10; i++) {
      this._queue.push([]);
    }
  }

}

exports.PriorityQueue = PriorityQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcmlvcml0eVF1ZXVlLmpzIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsInJlcXVpcmUiLCJQcmlvcml0eVF1ZXVlIiwiY29uc3RydWN0b3IiLCJfcXVldWUiLCJpIiwicHVzaCIsImVucXVldWUiLCJlbGVtZW50IiwicHJpb3JpdHkiLCJlbWl0IiwiZGVxdWV1ZSIsInNoaWZ0IiwidW5kZWZpbmVkIiwicCIsImxlbmd0aCIsImdldFNpemUiLCJjb3VudCIsInNpemUiLCJjbGVhciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBNUI7O0FBRU8sTUFBTUMsYUFBTixTQUE0QkYsWUFBNUIsQ0FBeUM7QUFDOUNHLEVBQUFBLFdBQVcsR0FBRztBQUNaO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLEVBQWQ7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzNCLFdBQUtELE1BQUwsQ0FBWUUsSUFBWixDQUFpQixFQUFqQjtBQUNEO0FBQ0Y7O0FBRURDLEVBQUFBLE9BQU8sQ0FBQ0MsT0FBRCxFQUFVQyxRQUFRLEdBQUcsQ0FBckIsRUFBd0I7QUFDN0IsU0FBS0wsTUFBTCxDQUFZSyxRQUFaLEVBQXNCSCxJQUF0QixDQUEyQkUsT0FBM0I7O0FBQ0EsU0FBS0UsSUFBTCxDQUFVLFNBQVYsRUFBcUJGLE9BQXJCLEVBQThCQyxRQUE5QjtBQUNEOztBQUVERSxFQUFBQSxPQUFPLENBQUNGLFFBQUQsRUFBVztBQUNoQixRQUFJQSxRQUFKLEVBQWM7QUFDWixZQUFNRCxPQUFPLEdBQUcsS0FBS0osTUFBTCxDQUFZSyxRQUFaLEVBQXNCRyxLQUF0QixFQUFoQjs7QUFDQSxVQUFJSixPQUFPLEtBQUtLLFNBQWhCLEVBQTJCO0FBQ3pCLGFBQUtILElBQUwsQ0FBVSxTQUFWLEVBQXFCRixPQUFyQixFQUE4QkMsUUFBOUI7QUFDRDs7QUFFRCxhQUFPRCxPQUFQO0FBQ0Q7O0FBRUQsU0FBSSxJQUFJTSxDQUFDLEdBQUcsQ0FBWixFQUFlQSxDQUFDLEdBQUcsRUFBbkIsRUFBdUJBLENBQUMsRUFBeEIsRUFBNEI7QUFDMUIsVUFBSSxLQUFLVixNQUFMLENBQVlVLENBQVosRUFBZUMsTUFBZixHQUF3QixDQUE1QixFQUErQjtBQUM3QixjQUFNUCxPQUFPLEdBQUcsS0FBS0osTUFBTCxDQUFZVSxDQUFaLEVBQWVGLEtBQWYsRUFBaEI7O0FBQ0EsYUFBS0YsSUFBTCxDQUFVLFNBQVYsRUFBcUJGLE9BQXJCLEVBQThCTSxDQUE5QjtBQUNBLGVBQU9OLE9BQVA7QUFDRDtBQUNGOztBQUVELFdBQU9LLFNBQVA7QUFDRDs7QUFFREcsRUFBQUEsT0FBTyxDQUFDUCxRQUFELEVBQVc7QUFDaEIsUUFBSUEsUUFBSixFQUFjO0FBQ1osYUFBTyxLQUFLTCxNQUFMLENBQVlLLFFBQVosRUFBc0JNLE1BQTdCO0FBQ0Q7O0FBRUQsUUFBSUUsS0FBSyxHQUFJLENBQWI7O0FBQ0EsU0FBSSxJQUFJSCxDQUFDLEdBQUcsQ0FBWixFQUFlQSxDQUFDLEdBQUcsRUFBbkIsRUFBdUJBLENBQUMsRUFBeEIsRUFBNEI7QUFDMUJHLE1BQUFBLEtBQUssSUFBSSxLQUFLYixNQUFMLENBQVlVLENBQVosRUFBZUMsTUFBeEI7QUFDRDs7QUFFRCxXQUFPRSxLQUFQO0FBQ0Q7O0FBRU8sTUFBSkMsSUFBSSxHQUFHO0FBQ1QsV0FBTyxLQUFLRixPQUFMLEVBQVA7QUFDRDs7QUFFREcsRUFBQUEsS0FBSyxHQUFHO0FBQ04sU0FBSyxJQUFJZCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzNCLFdBQUtELE1BQUwsQ0FBWUUsSUFBWixDQUFpQixFQUFqQjtBQUNEO0FBQ0Y7O0FBeEQ2QyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50ZW1pdHRlcjMnKVxyXG5cclxuZXhwb3J0IGNsYXNzIFByaW9yaXR5UXVldWUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKVxyXG4gICAgdGhpcy5fcXVldWUgPSBbXVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XHJcbiAgICAgIHRoaXMuX3F1ZXVlLnB1c2goW10pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBlbnF1ZXVlKGVsZW1lbnQsIHByaW9yaXR5ID0gNSkge1xyXG4gICAgdGhpcy5fcXVldWVbcHJpb3JpdHldLnB1c2goZWxlbWVudClcclxuICAgIHRoaXMuZW1pdCgnZW5xdWV1ZScsIGVsZW1lbnQsIHByaW9yaXR5KVxyXG4gIH1cclxuXHJcbiAgZGVxdWV1ZShwcmlvcml0eSkge1xyXG4gICAgaWYgKHByaW9yaXR5KSB7XHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9xdWV1ZVtwcmlvcml0eV0uc2hpZnQoKVxyXG4gICAgICBpZiAoZWxlbWVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdkZXF1ZXVlJywgZWxlbWVudCwgcHJpb3JpdHkpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBlbGVtZW50XHJcbiAgICB9XHJcblxyXG4gICAgZm9yKGxldCBwID0gMDsgcCA8IDEwOyBwKyspIHtcclxuICAgICAgaWYgKHRoaXMuX3F1ZXVlW3BdLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fcXVldWVbcF0uc2hpZnQoKVxyXG4gICAgICAgIHRoaXMuZW1pdCgnZGVxdWV1ZScsIGVsZW1lbnQsIHApXHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1bmRlZmluZWRcclxuICB9XHJcblxyXG4gIGdldFNpemUocHJpb3JpdHkpIHtcclxuICAgIGlmIChwcmlvcml0eSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fcXVldWVbcHJpb3JpdHldLmxlbmd0aFxyXG4gICAgfVxyXG5cclxuICAgIGxldCBjb3VudCAgPSAwXHJcbiAgICBmb3IobGV0IHAgPSAwOyBwIDwgMTA7IHArKykge1xyXG4gICAgICBjb3VudCArPSB0aGlzLl9xdWV1ZVtwXS5sZW5ndGhcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY291bnRcclxuICB9XHJcblxyXG4gIGdldCBzaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0U2l6ZSgpXHJcbiAgfVxyXG5cclxuICBjbGVhcigpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xyXG4gICAgICB0aGlzLl9xdWV1ZS5wdXNoKFtdKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=